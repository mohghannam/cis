---
- hosts: redhat7 test
  name: This is for configuring SSH for Redhat Enterprise linux Server 7.0
  tasks:
  - name: set required perms on /etc/ssh/sshd_config
    copy: 
      src: /etc/ssh/sshd_config
      dest: /usr/share/cis
      remote_src: yes
      force: no
  - file:
       path: /etc/ssh/sshd_config
       owner: root
       group: root
       mode: '0600'
  
  - name: Ensure SSH Protocol is set to 2
    shell: grep "^Protocol" /etc/ssh/sshd_config
    register: proto_check
    ignore_errors: yes
  - lineinfile:
       path: /etc/ssh/sshd_config
       line: Protocol 2
       insertafter: yes
       state: present
    when: proto_check.stdout == ""

  - name: Ensure SSH HostbasedAuthentication is disabled
    shell: grep "^HostbasedAuthentication" /etc/ssh/sshd_config
    register: host_based_check
    ignore_errors: yes
  - lineinfile:
      path: /etc/ssh/sshd_config
      line: HostbasedAuthentication no
      insertafter: yes
      state: present
    when: host_based_check.stdout == ""

  - name: Ensure SSH LogLevel is set to INFO
    shell: grep "^LogLevel" /etc/ssh/sshd_config
    register: log_level
    ignore_errors: yes
  - lineinfile:
       path: /etc/ssh/sshd_config
       line: LogLevel INFO
       insertafter: yes
       state: present
    when: log_level.stdout == ""
  

  - name: X11
    shell: grep '^X11Forwarding' /etc/ssh/sshd_config
    register: x11var
    ignore_errors: yes

  - name: add X11Forwarding
    lineinfile:
     line: X11Forwarding no
     state: present
     path: /etc/ssh/sshd_config
    when: x11var.stdout == ""

  - name: replace X11Forwarding
    replace:
     path: /etc/ssh/sshd_config
     regexp: '^X11Forwarding.*yes'
     replace: 'X11Forwarding no'
    when: x11var.stdout is match("X11Forwarding.*yes.*")


#  - name: Ensure SSH X11 forwarding is disabled
#    shell: grep "^X11Forwarding no" /etc/ssh/sshd_config
#    register: x11_for
#    ignore_errors: yes
#  - lineinfile:
#       path: /etc/ssh/sshd_config
#       line: X11Forwarding no
#       state: present
#       insertafter: yes
#    when: x11_for.stdout == ""

  - name: Ensure SSH MaxAuthTries is set to 4 or less
    shell: grep "^MaxAuthTries" /etc/ssh/sshd_config
    register: max_auth 
    ignore_errors: yes
  - lineinfile: 
        path: /etc/ssh/sshd_config
        line: MaxAuthTries 4
        state: present
        insertafter: yes
    when: max_auth.stdout == ""
  
  - name: Ensure SSH IgnoreRhosts is enabled
    shell: grep "^IgnoreRhosts" /etc/ssh/sshd_config
    register: ignore_hosts
    ignore_errors: yes
  - lineinfile:
      path: /etc/ssh/sshd_config
      line: IgnoreRhosts yes
      state: present
      insertafter: yes
    when: ignore_hosts.stdout == ""

  #- name: Ensure SSH root login is disabled
  #  shell: grep "^PermitRootLogin" /etc/ssh/sshd_config
  #  register: permit_root
  #  ignore_errors: yes
###############
#NOTE: YOU WOULD PROBABLY LOSE THE CONNECTION IF U USE ROOT AS A USER
##############
  #- debug: 
  #     msg: "Disable root permission for logining through SSH"
  #- lineinfile: 
  #     path: /etc/ssh/sshd_config
  #     line: PermitRootLogin no
  #     state: present
  #     insertafter: yes
  #  when: permit_root.stdout == 
  - name: Ensure SSH PermitEmptyPasswords is disabled
    shell: grep "^PermitEmptyPasswords" /etc/ssh/sshd_config 
    register: empty_passwd
    ignore_errors: yes
  - lineinfile:
       path: /etc/ssh/sshd_config
       line: PermitEmptyPasswords no
       state: present
       insertafter: yes
    when: empty_passwd.stdout == ""



  - name: PermitUserEnv ssh
    shell: grep '^PermitUserEnvironment' /etc/ssh/sshd_config
    register: myvar
    ignore_errors: yes

  - name: add PermitUserEnvironment
    lineinfile:
     line: PermitUserEnvironment no
     state: present
     path: /etc/ssh/sshd_config
    when: myvar.stdout == ""

  - name: replace PermitUserEnvironment
    replace:
     path: /etc/ssh/sshd_config
     regexp: '^PermitUserEnvironment.*yes'
     replace: 'PermitUserEnvironment no'
    when: myvar.stdout is match("PermitUserEnvironment.*yes.*")



#  - name: Ensure SSH PermitUserEnvironment is disabled
#    shell: grep '^PermitUserEnvironment no' /etc/ssh/sshd_config  
#    register: permit_user
#    ignore_errors: yes
#  - lineinfile: 
#      path: /etc/ssh/sshd_config
#      line: PermitUserEnvironment no
#      state: present
#      insertafter: yes
#    when: permit_user.stdout == ""

  - name: Ensure only approved MAC algorithms are used
    shell: grep "MACs" /etc/ssh/sshd_config
    register: approved_mac
    ignore_errors: yes
  - lineinfile:
       path: /etc/ssh/sshd_config
       line: MACs hmac-sha2-512,hmac-sha2-256
       state: present
       insertafter: yes
    when: approved_mac.stdout == ""

  - name: Ensure SSH Idle Timeout Interval is configured
    shell: grep "^ClientAliveInterval" /etc/ssh/sshd_config
    register: client_alive
    ignore_errors: yes
  - lineinfile:
       path: /etc/ssh/sshd_config
       line: ClientAliveInterval 300
       state: present 
       insertafter: yes
    when: client_alive.stdout == ""
  - shell: grep "^ClientAliveCountMax" /etc/ssh/sshd_config
    register: count_max
    ignore_errors: yes
  - lineinfile:
      path: /etc/ssh/sshd_config
      line: ClientAliveCountMax 0
      state: present
      insertafter: yes
    when: count_max.stdout == ""
  
  - name: Ensure SSH LoginGraceTime is set to one minute or less
    shell: grep "^LoginGraceTime" /etc/ssh/sshd_config
    register: login_grace_time
    ignore_errors: yes
  - lineinfile:
      path: /etc/ssh/sshd_config
      line: LoginGraceTime 60
      state: present 
      insertafter: yes
    when: login_grace_time.stdout == ""
   
  - name: nsure SSH warning banner is configured
    shell: grep "^Banner" /etc/ssh/sshd_config
    register: banner   
    ignore_errors: yes
  - lineinfile: 
       path: /etc/ssh/sshd_config
       line: Banner /etc/issue.net
       state: present
       insertafter: yes
    when: banner.stdout == ""
  
  - name: Configure PAM
    copy: 
     src: /etc/pam.d/password-auth
     dest: /usr/share/cis
     force: no
     remote_src: yes
  
  - shell:  grep 'pam_cracklib.so.*try_first_pass*.retry=3.*minlen=14.*dcredit=-1.*ucredit=-1.*ocredit=-1.*lcredit=-1' /etc/pam.d/password-auth
    register: pam_con
    ignore_errors: yes
  - lineinfile: 
       path: /etc/pam.d/password-auth
       line: password requisite pam_cracklib.so try_first_pass retry=3 minlen=14 dcredit=-1 ucredit=-1 ocredit=-1 lcredit=-1
       state: present
       insertafter: yes
    when: pam_con.stdout == ""
  
  
  - copy:
     src: /etc/security/pwquality.conf
     dest: /usr/share/cis
     remote_src: yes
     force: no
    ignore_errors: yes


#######################
#PASSWORD CONFIGURATION
#######################
  - name: Ensure lockout for failed password attempts is configured
    blockinfile:
       path: /etc/pam.d/password-auth
       state: present
       content: |
             auth        required      pam_faillock.so preauth audit silent deny=5 unlock_time=900
             auth        [success=1 default=bad]   pam_unix.so
             auth        [default=die]    pam_faillock.so authfail audit deny=5 unlock_time=900
             auth        sufficient    pam_faillock.so authsucc audit deny=5 unlock_time=900

  - name: back-up /etc/pam.d/system-auth
    copy:
      src: /etc/pam.d/system-auth
      dest: /usr/share/cis
      force: no
      remote_src: yes

  - shell:  grep 'pam_cracklib.so.*try_first_pass*.retry=3.*minlen=14.*dcredit=-1.*ucredit=-1.*ocredit=-1.*lcredit=-1' /etc/pam.d/system-auth
    register: pam_con
    ignore_errors: yes
  - lineinfile:
       path: /etc/pam.d/system-auth
       line: password requisite pam_cracklib.so try_first_pass retry=3 minlen=14 dcredit=-1 ucredit=-1 ocredit=-1 lcredit=-1
       state: present
       insertafter: yes
    when: pam_con.stdout == ""


  - blockinfile:
      path: /etc/pam.d/system-auth
      state: present
      content: |
          auth        required      pam_faillock.so preauth audit silent deny=5 unlock_time=900
          auth        [success=1 default=bad]   pam_unix.so
          auth        [default=die]    pam_faillock.so authfail audit deny=5 unlock_time=900
          auth        sufficient    pam_faillock.so authsucc audit deny=5 unlock_time=900

  - name: Ensure password reuse is limited
    lineinfile:
       path: /etc/pam.d/password-auth
       line: password sufficient pam_unix.so remember=5
       state: present
       insertafter: yes

  - lineinfile:
       path: /etc/pam.d/system-auth
       line: password sufficient pam_unix.so remember=5
       state: present
       insertafter: yes

  - name: Ensure password hashing algorithm is SHA-512
    shell:  egrep '^password.*sufficient.*pam_unix.so.*sha512' /etc/pam.d/password-auth
    register: hash_alg
    ignore_errors: yes
  
  - lineinfile: 
      path: /etc/pam.d/password-auth
      line:  password sufficient pam_unix.so sha512
      state: present
      insertafter: yes
    when: hash_alg.stdout == ""
  - shell: egrep '^password.*sufficient.*pam_unix.so.*sha512' /etc/pam.d/system-auth 
    register: hash_algo_2
    ignore_errors: yes
  - lineinfile: 
      path: /etc/pam.d/system-auth
      line: password sufficient pam_unix.so sha512
      state: present
      insertafter: yes
    when: hash_algo_2.stdout == ""
  
  - name: Set Shadow Password Suite Parameters
    copy:
      src: /etc/login.defs
      dest: /usr/share/cis
      force: no
      remote_src: yes
  
  - shell: grep '^PASS_MAX_DAYS.*90' /etc/login.defs
    register: passwd_params
    ignore_errors: yes
  - replace: 
      path: /etc/login.defs
      regexp: '^PASS_MAX_DAYS.*'
      replace: PASS_MAX_DAYS 90
      backup: yes
    when: passwd_params.stdout == ""

  - name: Ensure minimum days between password changes is 7 or more
    shell: grep 'PASS_MIN_DAYS.*7' /etc/login.defs
    register: passwd_change
    ignore_errors: yes
  - replace: 
      path: /etc/login.defs
      regexp: '^PASS_MIN_DAYS.*'
      replace: PASS_MIN_DAYS 7
      backup: yes
    when: passwd_change.stdout == ""
  
  - name: Ensure password expiration warning days is 7 or more
    shell:  grep PASS_WARN_AGE /etc/login.defs
    register: passwd_warn
    ignore_errors: yes
  - lineinfile:
      path: /etc/login.defs
      line: PASS_WARN_AGE 7
      state: present
      insertafter: yes
    when: passwd_warn.stdout == ""
  
  - name: Ensure inactive password lock is 30 days or less
    shell: useradd -D | grep "INACTIVE=30"
    register: inactive_passwd
    ignore_errors: yes
  - shell: useradd -D -f 30
    when: inactive_passwd.stdout == ""

  - name: Ensure default group for the root account is GID 0
    copy:
      src: /etc/passwd
      dest: /usr/share/cis
      force: no
      remote_src: yes

  - shell:  'grep "^root:" /etc/passwd | cut -f4 -d:'
    register: default_grp
    ignore_errors: yes
  - shell:  usermod -g 0 root
    when: default_grp.stdout == ""
 
  - name: Ensure default user umask is 027 or more restrictive
    copy: 
      src: /etc/bashrc
      dest: /usr/share/cis
      force: no
      remote_src: yes
   
  - shell:  grep "umask" /etc/bashrc
    register: mask_check
    ignore_errors: yes
  - lineinfile:
      path: /etc/bashrc
      state: present
      line: umask 027
      insertafter: yes
    when: mask_check.stdout == ""
  - copy:
      src: /etc/profile
      dest: /usr/share/cis
      force: no
      remote_src: yes
  - shell:  grep "umask" /etc/profile
    register: mask_ch
    ignore_errors: yes
  - lineinfile:
      path: /etc/profile
      state: present
      line: umask 027
      insertafter: yes
    when: mask_ch.stdout == ""

  - name: Ensure default user shell timeout is 900 seconds or less
    shell: grep "^TMOUT" /etc/bashrc
    register: timeout_ch
    ignore_errors: yes
  - lineinfile:
      path: /etc/bashrc
      line: TMOUT=600
      state: present
      insertafter: yes
    when: timeout_ch.stdout == ""
  - shell: grep "^TMOUT" /etc/profile
    register: timout_ch2
    ignore_errors: yes
  - lineinfile: 
      path: /etc/profile
      line: TMOUT=600
      state: present
      insertafter: yes
    when: timout_ch2.stdout == ""

  - name: Ensure access to the su command is restricted
    copy:
      src: /etc/pam.d/su
      dest: /usr/share/cis
      force: no
      remote_src: yes
  
  - shell: grep pam_wheel.so /etc/pam.d/su
    register:  access_su
    ignore_errors: yes
  - lineinfile:
       path: /etc/pam.d/su
       line: auth     required    pam_wheel.so use_uid
       state: present
       insertafter: yes
    when: access_su.stdout == ""
  
