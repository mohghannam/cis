---
- hosts: os
  name: Executing tasks

  tasks:
  
  - name: set suid on all world-wide directories
    shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type d -perm -0002 2>/dev/null | xargs chmod a+t
    register: result
  - name:
    debug:
      msg: "{{ result }}" 

  - name: check whether gpgcheck is configured correctly
    shell:   grep ^gpgcheck /etc/yum.repos.d/*
    register: result_2
  - debug:
      msg: "{{ result_2 }}"
  
  - name: Updating the repos so that they can have the gpgcheck enabled
    shell: ls /etc/yum.repos.d
    register: repos
  - debug:
        msg: "{{ repos }}"

  - name: check whether gpgcheck is configured correctly 
    shell:  rpm -q gpg-pubkey --qf '%{name}-%{version}-%{release} --> %{summary}\n'
    register: result_3
    ignore_errors: yes
  - debug:
      msg: "{{ result_3 }}"
 
  - name: check whether grub file exist
    stat:
      path: /boot/grub2/grub.cfg
    register: stat_result

  - name: check whether /boot/grub2/user.cfg exists
    stat:
      path: /boot/grub2/user.cfg
    register: user_cfg

  - copy:
      src: /boot/grub2/grub.cfg
      dest: /usr/share/cis
      force: no
      remote_src: yes
    when: stat_result.stat.exists == True

  - copy:
      src: /boot/grub2/grub.cfg
      dest: /usr/share/cis
      force: no
      remote_src: yes
    when: user_cfg.stat.exists == True


  - name: setting required permission on grub
    file:
      path: /boot/grub2/grub.cfg
      owner: root
      group: root
      mode: '0600' 
    when: stat_result.stat.exists == True
    register: result_4

  - name: setting required permission on /boot/grub2/user.cfg
    file:
      path: /boot/grub2/user.cfg
      owner: root
      group: root
      mode: '0600'
    when: user_cfg.stat.exists == True
    register: result_4


  - name: verify selinux=0 does not exist
    shell:  grep "^\s*linux=0" /boot/grub2/grub.cfg
    register: selinux_grub
    when: stat_result.stat.exists == True
    ignore_errors: yes
 
  #- name: check selinux configuration
  #  shell: grep "SELINUX=enforcing" /etc/selinux/config
  #  register: selinux_var
  #  ignore_errors: yes
  - name: setting selinux
    copy: 
      src: /etc/selinux/config
      dest: /usr/share/cis
      force: no
     
  - selinux:
      policy: targeted
      state: enforcing 
  - debug:
      msg: "the var selinux_grub: {{ selinux_grub }}"


  - name: remove non needed params from /etc/default/grub
    copy:
      src: /etc/default/grub
      dest: /usr/share/cis
      force: no
  - name: appending word in line
    shell: grep -i GRUB_CMDLINE_LINUX /etc/default/grub
    register: check_sys_lvm
    ignore_errors: yes
  - debug:
      msg: "{{ check_sys_lvm }} "


  - name: adding kernel boot parm
    lineinfile:
      path: /etc/default/grub
      line: "{{ check_sys_lvm['stdout'] }}"
      state: absent

  - shell: "> /usr/share/cis/temp_grub"
  - name: write in temp file
    lineinfile:
      path: /usr/share/cis/temp_grub
      line: "{{ check_sys_lvm['stdout'] }}"
      state: present
      create: yes
  - shell: cat /usr/share/cis/temp_grub | cut -d "\"" -f 2
    register: line

  - debug:
      msg: "{{ line['stdout'] }}"
  - lineinfile:
      path: /etc/default/grub
      line: "GRUB_CMDLINE_LINUX=\"{{line['stdout']}} audit=1 ipv6.disable=1\""
      state: present
    notify:
       - update_grub


  - debug: 
      msg: "{{ result_4 }}"
    when: result_4 

  - name: verify /etc/issue has no /r /m /s
    copy:
      src: /etc/issue
      dest: /usr/share/cis
      force: no
  - shell:   egrep '(\\v|\\r|\\m|\\s)' /etc/issue
    register: check_issue
    ignore_errors: yes
  
  - debug:
      msg: "##### {{ check_issue }} "

  - name: reconfigure /etc/issue
    shell: echo "Authorized uses only. All activity may be monitored and reported." > /etc/issue
    #when: check_issue['stdout']
 
  - name: verify /etc/issue.net has no /r /m /s
    copy: 
     src: /etc/issue.net
     dest: /usr/share/cis
     force: no
  - shell:   egrep '(\\v|\\r|\\m|\\s)' /etc/issue.net
    register: check_issuenet
    ignore_errors: yes

  - name: reconfigure /etc/issue.net
    shell: echo "Authorized uses only. All activity may be monitored and reported." > /etc/issue.net
    #when: check_issuenet.stdout != ""

  - name: setting required permission on /etc/motd
    copy:
     src: /etc/motd
     dest:  /usr/share/cis
     force: no
  - file:
      path: /etc/motd
      owner: root
      group: root
      mode: '644'

  - name: setting required permission on /etc/issue
    file:
      path: /etc/issue
      owner: root
      group: root
      mode: '644'
  - name: setting required permission on /etc/issue.net
    file:
      path: /etc/issue.net
      owner: root
      group: root
      mode: '644'
  - name: ensure /etc/hosts.allow existence
    copy:
      src: /etc/hosts.allow
      dest: /usr/share/cis
      force: no
  - file:
      path: /etc/hosts.allow 
      owner: root 
      group: root
      mode: '644'
  
  - name: ensure /etc/hosts.deny existence
    copy:
      src: /etc/hosts.deny
      dest: /usr/share/cis
      force: no
  - file:
     path: /etc/hosts.deny
     owner: root
     group: root
     mode: '644'

  - name: verify /etc/issue.net has no /r /m /s
    shell:   yum list installed | grep -i gdm
    register: check_gdm
    ignore_errors: yes

    

  - name: reconfigure /etc/dconf/profile/gdm
    copy:
     src: /etc/dconf/profile/gdm
     dest: /usr/share/cis
     force: no
     remote_src: yes
    when: check_gdm.stdout != ""
  - blockinfile:
      path: /etc/dconf/profile/gdm
      insertafter: 
      content: |
         user-db:user
         system-db:gdm
         file-db:/usr/share/gdm/greeter-dconf-defaults
    when: check_gdm.stdout != ""



  - name: reconfigure /etc/dconf/db/gdm.d/*
    copy:
     src: /etc/dconf/db/gdm.d
     dest: /usr/share/cis
     force: no
    when: check_gdm.stdout != ""
  - blockinfile:
      path: /etc/dconf/db/gdm.d/*
      insertafter:
      content: |
          [org/gnome/login-screen]
          banner-message-enable=true
          banner-message-text='Authorized uses only. All activity may be monitored and
    when: check_gdm.stdout != ""
 

  - name: update system db
    shell:  dconf update
    when: check_gdm.stdout != ""
  
  - name: Update Security PKGs
    yum:
      security: yes
      state: latest
  - name: verify whether ntp or chrony is installed
    shell: yum list installed | grep ntp
    register: ntp_check
    ignore_errors: yes
  
  - debug: var=ntp_check
    when: ntp_check is defined

  - shell: yum list installed | grep chrony
    register: chrony_check
    ignore_errors: yes

  - name: install ntp
    shell: yum install ntp -y
    when: ntp_check.stdout == "" and chrony_check.stdout == ""
    register: ansible_facts

  - debug:
     msg: " the data are:  {{ ansible_facts['changed'] }}"
  - lineinfile:
        path: /usr/share/cis/tasks-status.yml
        line: "status1: {{ ansible_facts['changed'] }} ##ntp"
        state: present

  - name: check ntp configuration
    copy:
      src: /etc/ntp.conf
      dest: /usr/share/cis
      force: no
      remote_src: yes
    when: ansible_facts['changed']
    #when: ntp_check.stdout == "" and chrony_check.stdout == "" 
  - shell: grep "^restrict" /etc/ntp.conf
    register: ntp_config_check
    ignore_errors: yes 
    when: ansible_facts['changed']
  #- debug: var2=ntp_config_check
  #  when: ntp_check.stdout == "" 
  #- debug: var=ntp_config_check 
  - name: configure ntp
    blockinfile:
      path: /etc/ntp.conf
      insertafter:
      content: |
          restrict -4 default kod nomodify notrap nopeer noquery
          restrict -6 default kod nomodify notrap nopeer noquery
    when: ansible_facts['changed']
    #when: ntp_config_check['stdout'] == "" and ntp_check.stdout != ""

  - name: verify and disable ipv6
    shell: grep "^\s*linux" /boot/grub2/grub.cfg | grep -i "ipv6.disable=1"
    register: ipv6_dis
    ignore_errors: yes
 

  - name: Backing up /etc/rsyslog.conf file
    copy:
      src: /etc/rsyslog.conf
      dest: /usr/share/cis
      force: no
      remote_src: yes
  - copy:
      src: /etc/rsyslog.d
      dest: /usr/share/cis
      force: no

  - name: Ensure remote rsyslog messages are only accepted on designated log hosts
    blockinfile:
      path: /etc/rsyslog.conf
      insertafter: yes
      content: |
          ###Ensure remote rsyslog messages are only accepted on designated log hosts
          $ModLoad imtcp
          $InputTCPServerRun 514

  - name: Ensure rsyslog default file permissions configured 
    lineinfile:
      path: /etc/rsyslog.conf
      line: $FileCreateMode 0640
      state: present
      insertafter: yes
  - pause:
      seconds: 5
  - lineinfile:
      path: /etc/rsyslog.conf
      line: "*.* @@loghost.example.com"
      state: present
      insertafter: yes 
    notify: reload_the_rsyslogd_configuration

  - name: Ensure syslog-ng default file permissions configured
    shell: ls /etc/syslog-ng/syslog-ng.conf
    register: file_exist
    ignore_errors: yes
  - copy:
      src: /etc/syslog-ng/syslog-ng.conf
      dest: /usr/share/cis
      force: no
      remote_src: yes
    when: file_exist.stdout != ""
  - shell: grep ^options /etc/syslog-ng/syslog-ng.conf
    register: syslog_def_check
    ignore_errors: yes
  - lineinfile:
       path: /etc/syslog-ng/syslog-ng.conf
       line: options { chain_hostnames(off); flush_lines(0); perm(0640); stats_freq(3600); threaded(yes); };
       insertafter: yes
       state: present
    when: file_exist.stdout != "" and syslog_def_check.stdout == ""

  - name: Ensure syslog-ng is configured to send logs to a remote log host
    blockinfile:
       path: /etc/syslog-ng/syslog-ng.conf
       content: |
          destination logserver { tcp("logfile.example.com" port(514)); };
          log { source(src); destination(logserver); }; 
       insertafter: yes
       state: present
    when: file_exist.stdout != "" and syslog_def_check.stdout == ""
    notify:
       - reload the syslog-ng configuration
  - name: Ensure remote syslog-ng messages are only accepted on designated log hosts
    blockinfile:
       path: /etc/syslog-ng/syslog-ng.conf
       content: |
           source net{ tcp(); };
           destination remote { file("/var/log/remote/${FULLHOST}-log"); };
           log { source(net); destination(remote); };
       insertafter: yes
       state: present
    when: file_exist.stdout != "" and syslog_def_check.stdout == ""
    notify:
       - reload the syslog-ng configuration

  - name: Ensure permissions on all logfiles are configured
    shell: find /var/log -type f -exec chmod g-wx,o-rwx {} +

  - name: Ensure permissions on /etc/crontab are configured
    file:
       path: /etc/crontab
       owner: root
       group: root
       mode: '0600'
  - name: Ensure permissions on /etc/cron.hourly are configured
    file:
       path: /etc/cron.hourly
       owner: root
       group: root
       mode: '0700'
  - name: Ensure permissions on /etc/cron.daily are configured
    file:
       path: /etc/cron.daily
       owner: root
       group: root
       mode: '0700'
  - name: Ensure permissions on /etc/cron.weekly are configured
    file:
       path: /etc/cron.weekly 
       owner: root
       group: root
       mode: '0700'
  - name: Ensure permissions on /etc/cron.monthly are configured
    file:
       path: /etc/cron.monthly
       owner: root
       group: root
       mode: '0700'
  - name: Ensure permissions on /etc/cron.d are configured
    file:
       path: /etc/cron.d
       owner: root
       group: root
       mode: '0700'
  - name: Ensure at/cron is restricted to authorized users
    file:
       path: /etc/cron.deny
       owner: root
       group: root
       mode: '0600'
  - shell: ls /etc/cron.allow
    register: f_exist
    ignore_errors: yes
  - file:
       path: /etc/cron.allow
       owner: root
       group: root
       mode: '0600'
    when: f_exist.stdout != ""
    

  - name: set required perms on /etc/ssh/sshd_config
    file: 
       path: /etc/ssh/sshd_config
       owner: root
       group: root
       mode: '0600'
  
  - name: Ensure no world writable files exist
    shell: find item.mount  -xdev -type f -perm -0002
    loop: "{{ ansible_mounts }}"
    ignore_errors: yes
     

  - name: Ensure no unowned files or directories exist
    shell: find item.mount -xdev -nouser
    loop: "{{ ansible_mounts }}"
    ignore_errors: yes
 
  - name: Ensure no ungrouped files or directories exist
    shell: find item.mount -xdev -nogroup
    loop: "{{ ansible_mounts }}"
    ignore_errors: yes

  - name: Audit SUID executables
    shell: find item.mount -xdev -type f -perm -4000
    loop: "{{ ansible_mounts }}"
    ignore_errors: yes
 
  - name: Audit SGID executables
    shell: find item.mount -xdev -type f -perm -2000
    loop: "{{ ansible_mounts }}"
    ignore_errors: yes


  - name:  Ensure mail transfer agent is configured for local-only mode
    copy:
      src: /etc/postfix/main.cf
      dest: /usr/share/cis
      force: no 
      remote_src: yes
  - lineinfile:
      path: /etc/postfix/main.cf
      regexp: "^inet_interfaces"
      state: absent
  - lineinfile:
      path: /etc/postfix/main.cf
      line: "inet_interfaces = loopback-only"
      state: present
  - systemd:
      name: postfix
      state: restarted
  

  handlers:
  - name: sleep 
    pause:
     seconds: 7
  - name: update_grub
    shell:  grub2-mkconfig > /boot/grub2/grub.cfg

  - name: reload_the_rsyslogd_configuration
    shell: pkill -HUP rsyslogd
  
  - name: reload the syslog-ng configuration
    shell: pkill -HUP syslog-ng
  
  
