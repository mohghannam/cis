---
- hosts: os
  name: Authentication and Authorization Hardening
  tasks:
  - name: making sure the back-up prerequisites are done
    file:
      path: /usr/share/cis
      state: directory
      owner: root
      group: root
      mode: '0744'
  - file:
      path: /usr/share/cis/tasks-status.yml
      owner: root
      group: root
      mode: '0644'
      state: touch
  - shell: "> /usr/share/cis/tasks-status.yml"

  - name: taking backup of /etc/pam.d/system-auth
    copy:
      src: /etc/pam.d/system-auth
      dest: /usr/share/cis
      remote_src: yes
      force: no
  - name: taking backup of /etc/pam.d/password-auth
    copy:
      src: /etc/pam.d/password-auth
      dest: /usr/share/cis
      remote_src: yes
      force: no

  - name: Ensure password hashing algorithm is SHA-512
    shell: egrep '^password\s+sufficient\s+pam_unix.so' /etc/pam.d/system-auth  | grep sha512
    register: sha_algo
    ignore_errors: yes
  - debug:
      msg: "######### {{ sha_algo }} "
  - lineinfile:
       path: /etc/pam.d/system-auth
       line: password sufficient pam_unix.so sha512
       state: present
    when: sha_algo['stdout'] == ""

  - name: Ensure password hashing algorithm is SHA-512
    shell: egrep '^password\s+sufficient\s+pam_unix.so' /etc/pam.d/password-auth  | grep sha512
    register: sha_algo
    ignore_errors: yes
  - debug:
      msg: "######### {{ sha_algo }} "
  - lineinfile:
       path: /etc/pam.d/password-auth
       line: password sufficient pam_unix.so sha512
       state: present
    when: sha_algo['stdout'] == ""

  
  - name: password reuse limit password-auth
    shell: egrep -i '^password\s+sufficient\s+pam_unix.so' /etc/pam.d/password-auth
    register: check_sys_lvm
    ignore_errors: yes
  - debug:
      msg: "{{ check_sys_lvm }} "


  - name: adding kernel boot parm
    lineinfile:
      path: /etc/pam.d/password-auth
      line: "{{ check_sys_lvm['stdout'] }}"
      state: absent

  - shell: "> /usr/share/cis/temp_password-auth"
  - name: write in temp file
    lineinfile:
      path: /usr/share/cis/temp_password-auth
      line: "{{ check_sys_lvm['stdout'] }}"
      state: present
      create: yes
  - shell: cat /usr/share/cis/temp_password-auth | cut -d "\"" -f 2
    register: line

  - debug:
      msg: "{{ line['stdout'] }}"
  - lineinfile:
      path: /etc/pam.d/password-auth
      line: "{{line['stdout']}} remember=5"
      state: present


  - name: password limit system-auth
    shell: egrep -i '^password\s+sufficient\s+pam_unix.so' /etc/pam.d/system-auth
    register: check_sys_lvm
    ignore_errors: yes
  - debug:
      msg: "{{ check_sys_lvm }} "


  - name: adding kernel boot parm
    lineinfile:
      path: /etc/pam.d/system-auth
      line: "{{ check_sys_lvm['stdout'] }}"
      state: absent

  - shell: "> /usr/share/cis/temp_system-auth"
  - name: write in temp file
    lineinfile:
      path: /usr/share/cis/temp_system-auth
      line: "{{ check_sys_lvm['stdout'] }}"
      state: present
      create: yes
  - shell: cat /usr/share/cis/temp_system-auth | cut -d "\"" -f 2
    register: line

  - debug:
      msg: "{{ line['stdout'] }}"
  - lineinfile:
      path: /etc/pam.d/system-auth
      line: "{{line['stdout']}} remember=5"
      state: present

  - name: set suid on all world-wide directories
    shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type d -perm -0002 2>/dev/null | xargs chmod a+t
    register: result

  - name:
    debug:
      msg: "{{ result }}" 

  - name: checking nologin in single-user mode
    copy:
       src: /usr/lib/systemd/system/emergency.service
       dest: /usr/share/cis
       force: no
  - shell: grep /sbin/sulogin /usr/lib/systemd/system/emergency.service
    register: check
    ignore_errors: yes

  - debug: msg="WARNING"
    when: check is not defined
  - name: Ensure authentication required for single user mode
    lineinfile: 
       path: /usr/lib/systemd/system/emergency.service
       line: ExecStart=-/bin/sh -c "/sbin/sulogin; /usr/bin/systemctl --fail --no-block  default"
       state: present
       insertafter: yes
    when: check is not defined
  
  - name: checking nologin in single-user mode
    copy:
       src: /usr/lib/systemd/system/rescue.service
       dest: /usr/share/cis
       force: no
  - shell: grep /sbin/sulogin /usr/lib/systemd/system/rescue.service
    register: check
    ignore_errors: yes

  - lineinfile: 
      path: /usr/lib/systemd/system/emergency.service
      line: ExecStart=-/bin/sh -c "/sbin/sulogin; /usr/bin/systemctl --fail --no-block  default"
      state: present
      insertafter: yes
    when: check is not defined


  - name: reconfiguring /etc/security/limits.conf
    copy:
      src: /etc/security/limits.conf
      dest: /usr/share/cis 
      force: no
  - lineinfile:
      path: /etc/security/limits.conf
      line: "* hard core 0"
      state: present
      insertafter: yes

  - name: ensure /etc/passwd is backed-up
    shell: ls /usr/share/cis/passwd
    register: passwd_backedup
    ignore_errors: yes
  - copy: 
     src: /etc/passwd
     dest: /usr/share/cis
     remote_src: yes
     force: no
    when: passwd_backedup.stdout == ""

  - name: Ensure no legacy "+" entries exist in /etc/passwd
    shell: grep '^\+:' /etc/passwd
    register: legacy_entry
    ignore_errors: yes
  - debug:
      msg: "legacy entry passwd ################{{ legacy_entry }}"
  - lineinfile:
       path: /etc/passwd
       line: '^\+:'
       state: absent
    when: legacy_entry.stdout != ""
 
  - name: Ensure no legacy "+" entries exist in /etc/shadow
    shell: grep '^\+:' /etc/shadow
    register: legacy_entry_shadow
    ignore_errors: yes
  - debug:
       msg: "legacy entry shadow###################################{{ legacy_entry_shadow }}"
  - lineinfile:
       path: /etc/shadow
       line: '^\+:'
       state: absent
    when: legacy_entry_shadow.stdout != "" 

  - name: Ensure no legacy "+" entries exist in /etc/group
    shell: grep '^\+:' /etc/group
    register: legacy_entry_group
    ignore_errors: yes
  - lineinfile:
       path: /etc/group
       line: '^\+:'
       state: absent
    when: legacy_entry_group.stdout != "" 
 
  - name: Ensure root is the only UID 0 account
    shell: "cat /etc/passwd | awk -F: '($3 == 0) { print $1 }'"
    register: root_check
    ignore_errors: yes
  - debug:
      msg: "warnning: The root is not the only user with Account ID=0"
    when: root_check.stdout != "root"

  - name: Ensure root PATH Integrity
    script: root_path_integrity.sh
    register: path_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING ROOT PATH NEEDS TO BE FIXED" 
    when: path_check.stdout != ""

  - name: Ensure all users' home directories exist
    script: users_home_dir.sh
    register: home_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....SOME USERS HAVE NO HOME DIRECTORIES"
    when: home_check.stdout != ""

  - name: Ensure users' home directories permissions are 750 or more restrictive
    script: users_home_perms.sh
    register: perm_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....SOME HOME DIRECTORIES HAVE EXCESSIVE PERMISSIONS"
    when: perm_check.stdout != ""

  - name: Ensure users own their home directories
    script: users_own_home_dir.sh
    register: own_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....SOME USERS DON'T OWN THEIR HOME DIRECTORIES"
    when: own_check.stdout != ""

  - name: Ensure users' dot files are not group or world writable
    script: users_home_Not_world_writable.sh
    register: writable_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....SOME USERS HOME DIRECTORIES ARE group or world writable"
    when: writable_check.stdout != ""

  - name: Ensure no users have .forward files
    script: users_no_forward.sh
    register: forward_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....SOME USERS HOME DIRECTORIES HAVE  .FORWARD FILE"
    when: forward_check.stdout != ""

  - name: Ensure no users have .netrc files
    script: users_.netrc.sh
    register: netrc_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....SOME USERS HOME DIRECTORIES HAVE .netrc FILE"
    when: netrc_check.stdout != ""

 
  - name: Ensure users' .netrc Files are not group or world accessible
    script: users_netrc_not_world_accessible.sh
    register: netrc_world_writable_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....SOME USERS .netrc ARE GROUP OR WORLD ACCESSIBLE"
    when: netrc_world_writable_check.stdout != ""


  - name: Ensure no users have .rhosts files
    script: users_have_rhosts.sh
    register: users_rhosts_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....SOME USERS HAVE .rhosts FILES"
    when: users_rhosts_check.stdout != ""

  - name: Ensure all groups in /etc/passwd exist in /etc/group
    script: ensure_groups.sh
    register: groups_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....SOME GROUPS IN /etc/passwd DON'T EXIST IN /etc/group"
    when: groups_check.stdout != ""

  - name: Ensure no duplicate UIDs exis
    script: no_duplicate_uids.sh
    register: uids_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....THERE IS DUPLICATE UIDs"
    when: uids_check.stdout != ""

  - name: Ensure no duplicate GIDs exis
    script: no_duplicate_gids.sh
    register: gids_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....THERE IS DUPLICATE gIDs"
    when: gids_check.stdout != ""

  - name: Ensure no duplicate user names exist
    script: no_duplicate_usernames.sh
    register: usernames_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....THERE IS DUPLICATE USERNAMES"
    when: usernames_check.stdout != ""

  - name: Ensure no duplicate group names exist
    script: no_duplicate_groupnames.sh
    register: groupnames_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....THERE IS DUPLICATE GROUPNAMES"
    when: groupnames_check.stdout != ""

  - name: Ensure root login is restricted to system console
    copy:
      src: /etc/securetty
      dest: /usr/share/cis
      force: no
      remote_src: yes

  - shell: "> /etc/securetty"

  handlers:
  - name: sleep 
    pause:
     seconds: 7
  - name: update_grub
    shell:  grub2-mkconfig > /boot/grub2/grub.cfg
  - name: setting net ipv4 flush param
    sysctl:
      name: net.ipv4.route.flush
      value: "1"
      sysctl_set: yes
  - name: setting net ipv6 flush param
    sysctl: 
      name: net.ipv6.route.flush
      value: "1"
      sysctl_set: yes

  - name: reload_the_rsyslogd_configuration
    shell: pkill -HUP rsyslogd
  
  - name: reload the syslog-ng configuration
    shell: pkill -HUP syslog-ng
